Architecture Overview


Driver Delivery App <------>
Agency Portal App   <------> Server <------> Harvest City Hq

(Server effectively means Staging Environment from RFP)

Backend / Server:
	Business Logic:
		- .Net Core REST API
		- C# (strongly typed, fast, robust)
		- Entity framework as ORM
		- Publish/Subscribe Event queue (prop. Kafka) to integrate w existing ERP

	Database:
		- PostgreSQL database
		- relational data
		- PostGIS (spatial & geographic objects for postgres)
			- time & GPS stamp for each delivery item
		- Agency portal app & driver delivery app share same API

		Tables:
			Location (w GPS)
			ReceiptStatus (ManyToOne Receipt, "Open", "Processed", "Cancelled")

			Transaction
				- relates to DeliveryStop
			TransactionType (eg. Delivery (Agencies), Pickup (Donors)
			TransactionItem (individual items per transaction)
				- lots of columns specifying category, weight, units, etc.
			TransactionStatus (Success, Fail, Pending, etc)
			
			DeliveryStops
				- OneToOne Location
				- OneToMany Transaction

			Routes:
				- collection of DeliveryStops


			--relations will yield an "active inventory" for drivers
				e.g. ALL TransactionItems OF ALL Transactions
					FOR EACH DeliveryStop 
					ON Route
					WHERE RouteId = 12 
						AND TransactionStatus = "PENDING" 
							OR TransactionStatus = "IN-TRANSIT"; 


	ERP Integration Options:
		- HQ can query API for updates at all times
		- Receive batch process daily/weekly
		- receive push notifications in real time


	By using a RESTful API, HQ can manage the state of the stagin area based on ERP/CRM,
		and apps are actively querying / keeping in sync w the staging environment


Apps:
	- built on Xamarin (C#)
		- same language as backend services -- much better maintainability
	- 85% of code is abstracted UX/UI data-access logic that is SHARED
	- 15% unique to native iOS and Android apps
	- Agent Portal and Driver Delivery connect to same service

	Persistence: 
		- maintain cache of unsynced transactions
		- continue all app functionality offline, sync upon connection

	Data Access:
		- initiate syncing procedure periodically
		- subscribe to DB events (via API)
		- publish data events to server (REST)

